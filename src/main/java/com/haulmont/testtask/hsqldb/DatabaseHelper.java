/*
 * Copyright 2016 Vladimir Kizelbashev
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.haulmont.testtask.hsqldb;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.SQLException;
import java.sql.Statement;

/**
 * The class {@code DatabaseHelper} represents a helper class for connection to database.
 *
 * @version 1.0
 * @author Vladimir
 */
public class DatabaseHelper {

    private static final String DRIVER = "org.hsqldb.jdbc.JDBCDriver";
    private static final String URL = "jdbc:hsqldb:file:/db/testdb";
    private static final String USER = "sa";
    private static final String PASS = "";

    private static Connection connection = null;

    private DatabaseHelper() {
    }

    public static Connection getConnection() throws Exception {
        if (connection == null) {
            try {
                Class.forName(DRIVER);
                connection = DriverManager.getConnection(URL, USER, PASS);
                initDatabase();
            } catch (Exception e) {
                throw e;
            }
        }
        return connection;
    }

    public static void closeConnection() throws SQLException {
        try {
            if (connection != null && !connection.isClosed()) {
                connection.close();
            }
        } catch (SQLException e) {
            throw e;
        }
    }

    private static void initDatabase() throws SQLException {
        try (Statement st = connection.createStatement()) {
            st.execute("CREATE TABLE IF NOT EXISTS T_Group (" +
                    "id BIGINT GENERATED BY DEFAULT AS IDENTITY " +
                    "(START WITH 1, INCREMENT BY 1) NOT NULL PRIMARY KEY, " +
                    "num INT NOT NULL, " +
                    "faculty NVARCHAR(32) NOT NULL);");

            st.execute("CREATE TABLE IF NOT EXISTS T_Student (" +
                    "id BIGINT GENERATED BY DEFAULT AS IDENTITY " +
                    "(START WITH 1, INCREMENT BY 1) NOT NULL PRIMARY KEY, " +
                    "firstname NVARCHAR(32) NOT NULL, " +
                    "lastname NVARCHAR(32) NOT NULL, " +
                    "middlename NVARCHAR(32), " +
                    "birthdate DATE, " +
                    "group_id BIGINT NOT NULL, " +
                    "CONSTRAINT FK_Group_Student " +
                    "FOREIGN KEY (group_id) REFERENCES T_Group(id) ON DELETE RESTRICT);");
        } catch (SQLException e) {
            throw e;
        }
    }
}
