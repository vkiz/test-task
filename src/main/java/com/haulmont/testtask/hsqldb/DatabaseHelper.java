/*
 * Copyright 2016 Vladimir Kizelbashev
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.haulmont.testtask.hsqldb;

import java.sql.*;
import java.util.ResourceBundle;

/**
 * The class {@code DatabaseHelper} represents a helper class for connection to database
 * and initialize the database data.
 *
 * @version 1.0
 * @author Vladimir
 */
public class DatabaseHelper {

    private static Connection connection = null;

    private DatabaseHelper() {
    }

    public static Connection getConnection() throws Exception {
        if (connection == null) {
            try {
                ResourceBundle resource = ResourceBundle.getBundle("database");
                String driver = resource.getString("db.driver");
                String url = resource.getString("db.url");
                String username = resource.getString("db.username");
                String password = resource.getString("db.password");

                Class.forName(driver);
                connection = DriverManager.getConnection(url, username, password);
                initDatabase();
            } catch (Exception e) {
                throw e;
            }
        }
        return connection;
    }

    public static void closeConnection() throws SQLException {
        try {
            if (connection != null && !connection.isClosed()) {
                connection.close();
            }
        } catch (SQLException e) {
            throw e;
        }
    }

    private static void initDatabase() throws SQLException {
        try (Statement st = connection.createStatement()) {
            if (!tableExists("T_GROUP")) {
                st.execute("create table T_GROUP (" +
                        "ID bigint generated by default as identity " +
                        "(start with 1, increment by 1) not null primary key, " +
                        "NUM int not null, " +
                        "FACULTY nvarchar(32) not null);");

                st.executeUpdate("insert into T_GROUP (ID, NUM, FACULTY) values (1, 101, 'Архитектуры');");
                st.executeUpdate("insert into T_GROUP (ID, NUM, FACULTY) values (2, 201, 'Биологии');");
                st.executeUpdate("insert into T_GROUP (ID, NUM, FACULTY) values (3, 301, 'Иностранных языков');");
                st.executeUpdate("insert into T_GROUP (ID, NUM, FACULTY) values (4, 401, 'Информационных технологий');");
                st.executeUpdate("insert into T_GROUP (ID, NUM, FACULTY) values (5, 501, 'Математики');");
                st.executeUpdate("insert into T_GROUP (ID, NUM, FACULTY) values (6, 601, 'Физики');");
                st.executeUpdate("insert into T_GROUP (ID, NUM, FACULTY) values (7, 701, 'Химии');");
                st.executeUpdate("insert into T_GROUP (ID, NUM, FACULTY) values (8, 402, 'Информационных технологий');");
                st.executeUpdate("insert into T_GROUP (ID, NUM, FACULTY) values (9, 302, 'Иностранных языков');");
                st.executeUpdate("insert into T_GROUP (ID, NUM, FACULTY) values (10, 502, 'Математики');");
            }

            if (!tableExists("T_STUDENT")) {
                st.execute("create table T_STUDENT (" +
                        "ID bigint generated by default as identity " +
                        "(start with 1, increment by 1) not null primary key, " +
                        "FIRST_NAME nvarchar(32) not null, " +
                        "LAST_NAME nvarchar(32) not null, " +
                        "MIDDLE_NAME nvarchar(32), " +
                        "BIRTH_DATE date, " +
                        "GROUP_ID bigint not null, " +
                        "constraint FK_GROUP_STUDENT " +
                        "foreign key (GROUP_ID) references T_GROUP(ID) on delete restrict);");

                st.executeUpdate("insert into T_STUDENT (ID, FIRST_NAME, LAST_NAME, MIDDLE_NAME, BIRTH_DATE, GROUP_ID) " +
                        "values (1, 'Иван', 'Андреев', 'Иванович', '1989-06-10', 9);");
                st.executeUpdate("insert into T_STUDENT (ID, FIRST_NAME, LAST_NAME, MIDDLE_NAME, BIRTH_DATE, GROUP_ID) " +
                        "values (2, 'Антон', 'Доценко', 'Семёнович', '1987-12-20', 4);");
                st.executeUpdate("insert into T_STUDENT (ID, FIRST_NAME, LAST_NAME, MIDDLE_NAME, BIRTH_DATE, GROUP_ID) " +
                        "values (3, 'Пётр', 'Иванов', 'Сергеевич', '1990-11-24', 5);");
                st.executeUpdate("insert into T_STUDENT (ID, FIRST_NAME, LAST_NAME, MIDDLE_NAME, BIRTH_DATE, GROUP_ID) " +
                        "values (4, 'Павел', 'Иванов', 'Николаевич', '1995-02-03', 6);");
                st.executeUpdate("insert into T_STUDENT (ID, FIRST_NAME, LAST_NAME, MIDDLE_NAME, BIRTH_DATE, GROUP_ID) " +
                        "values (5, 'Владимир', 'Кизельбашев', 'Алексеевич', '1985-08-20', 4);");
                st.executeUpdate("insert into T_STUDENT (ID, FIRST_NAME, LAST_NAME, MIDDLE_NAME, BIRTH_DATE, GROUP_ID) " +
                        "values (6, 'Ирина', 'Макарова', 'Петровна', '1991-09-05', 7);");
                st.executeUpdate("insert into T_STUDENT (ID, FIRST_NAME, LAST_NAME, MIDDLE_NAME, BIRTH_DATE, GROUP_ID) " +
                        "values (7, 'Любовь', 'Орлова', 'Сергеевна', '1987-03-10', 2);");
            }
        } catch (SQLException e) {
            throw e;
        }
    }

    private static boolean tableExists(String tableName) throws SQLException {
        boolean isExists = false;
        try (ResultSet rs = connection.getMetaData().getTables(null, null, tableName, null)) {
            while (rs.next()) {
                String tn = rs.getString("TABLE_NAME");
                if (tn != null && tn.equals(tableName)) {
                    isExists = true;
                    break;
                }
            }
        }
        return isExists;
    }
}
